# Generated by Django 3.2.5 on 2021-08-06 23:12

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('university', '0006_representative'),
        ('telegrambot', '0004_telegrambot'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserPrivilege',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('A', 'Amministratore'), ('P', 'Docente'), ('R', 'Rappresentante'), ('T', 'Tutor'), ('O', 'Other')], default='A', max_length=2, verbose_name='type')),
                ('scope', models.CharField(choices=[('G', 'Solo i gruppi autorizzati'), ('Dg', 'Solo i c.d.L. autorizzati'), ('Di', 'Solo i dipartimenti autorizzati'), ('A', "Tutto l'Ateneo")], default='G', help_text='Dove si dovrebbero applicare i permessi?\nIn caso di sovrapposizione, si applica il permesso pi√π specifico.', max_length=2, verbose_name='privileges scope')),
                ('custom_title', models.CharField(blank=True, max_length=16, null=True, verbose_name='custom title')),
                ('can_change_info', models.BooleanField(help_text='True, if the user is allowed to change the chat title, photo and other settings')),
                ('can_invite_users', models.BooleanField(help_text='True, if the user is allowed to invite new users to the chat')),
                ('can_pin_messages', models.BooleanField(help_text='True, if the user is allowed to pin messages; groups and supergroups only')),
                ('can_manage_chat', models.BooleanField(help_text='True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege')),
                ('can_delete_messages', models.BooleanField(help_text='True, if the administrator can delete messages of other users')),
                ('can_manage_voice_chats', models.BooleanField(help_text='True, if the administrator can manage voice chats')),
                ('can_restrict_members', models.BooleanField(help_text='True, if the administrator can restrict, ban or unban chat members')),
                ('can_promote_members', models.BooleanField(help_text='True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)')),
                ('authorized_degrees', models.ManyToManyField(blank=True, related_name='privileged_users', to='university.Degree')),
                ('authorized_departments', models.ManyToManyField(blank=True, related_name='privileged_users', to='university.Department')),
                ('authorized_groups', models.ManyToManyField(blank=True, related_name='privileged_users', to='telegrambot.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='privileges', to='telegrambot.user')),
            ],
            options={
                'verbose_name': 'User privilege',
                'verbose_name_plural': 'User privileges',
            },
        ),
    ]
